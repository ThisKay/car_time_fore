from __future__ import absolute_importfrom __future__ import divisionfrom __future__ import print_functionimport timefrom datetime import datetimeimport osos.environ["CUDA_VISIBLE_DEVICES"] = "0"import numpy as npimport tensorflow as tfimport readerimport utilimport util_kimport confUtil as confuimport h5pyfrom tensorflow.python.client import device_libflags = tf.flagslogging = tf.loggingflags.DEFINE_string(    "model", "small",    "A type of model. Possible options are: small, medium, large.")flags.DEFINE_string("data_path", None,                    "Where the training/test data is stored.")flags.DEFINE_string("save_path", None,                    "Model output directory.")flags.DEFINE_bool("use_fp16", False,                  "Train using 16-bit floats instead of 32bit floats")flags.DEFINE_integer("num_gpus", 1,                     "If larger than 1, Grappler AutoParallel optimizer "                     "will create multiple training replicas with each GPU "                     "running one replica.")flags.DEFINE_string("rnn_mode", None,                    "The low level implementation of lstm cell: one of CUDNN, "                    "BASIC, and BLOCK, representing cudnn_lstm, basic_lstm, "                    "and lstm_block_cell classes.")FLAGS = flags.FLAGSDAY_OR_SLOT = 0 #选择哪个数据集DATA_DIR = ['./dataset/train_by_day.h5', './dataset/train_by_slot.h5']LOG_DIR = './logs/'MODEL_STRING = 'small'OUT_FILE_NAME = ['./out/out_by_day_e%d.h5', 'out_by_slot_e%d.h5']def data_type():    return tf.float16 if FLAGS.use_fp16 else tf.float32class PTBInput(object):    '''    数据类，计算输入基本属性，epoch_size、batch_size    (batch_size,num_steps,3200)    '''    def __init__(self, config, data, name=None):        self.batch_size = batch_size = config.batch_size        self.num_steps = num_steps = config.num_steps        stride = 1  # TODO:移除，无效        self.epoch_size = len(data[0]) // batch_size        print("[Log] epoch_size：", self.epoch_size)        # self.input_data, self.targets = reader.ptb_producer(        #     data, batch_size, num_steps, name=name)        self.input_data, self.targets = util_k.ptb_producer_by_slot(            data, batch_size, num_steps, name=name, epoch_size=self.epoch_size, stride=stride)class PTBModel(object):    '''    模型类，定义模型结构    '''    def __init__(self, is_training, config, input_):        self._is_training = is_training        self._input = input_        self._rnn_params = None        self._cell = None        self.batch_size = input_.batch_size        self.num_steps = input_.num_steps        size = config.hidden_size        vocab_size = config.vocab_size        # 修改：不计算embedding        # with tf.device("/cpu:0"):        #     embedding = tf.get_variable(        #         "embedding", [vocab_size, size], dtype=data_type())        #     inputs = tf.nn.embedding_lookup(embedding, input_.input_data)        # input:(batch_size,num_steps,3200)        inputs = input_.input_data        if is_training and config.keep_prob < 1:            inputs = tf.nn.dropout(inputs, config.keep_prob)        # outputs:(batch_size*time_step,hidden_size)        output, state = self._build_rnn_graph_lstm(inputs, config, is_training)        output.set_shape([self.batch_size * self.num_steps, size])        # FC层        mid_size1 = 3500        fc1_w = tf.get_variable("fc1_w", [size, mid_size1],                                dtype=data_type(), trainable=True,                                initializer=tf.contrib.layers.xavier_initializer())        fc1_b = tf.get_variable("fc1_b", [mid_size1],                                dtype=data_type(), trainable=True,                                initializer=tf.contrib.layers.xavier_initializer())        fc1 = tf.nn.xw_plus_b(output, fc1_w, fc1_b)        mid_size2 = 3200        fc2_w = tf.get_variable("fc2_w", [mid_size1, mid_size2],                                dtype=data_type(), trainable=True,                                initializer=tf.contrib.layers.xavier_initializer())        fc2_b = tf.get_variable("fc2_b", [mid_size2],                                dtype=data_type(), trainable=True,                                initializer=tf.contrib.layers.xavier_initializer())        fc2 = tf.nn.xw_plus_b(fc1, fc2_w, fc2_b)        fc3_w = tf.get_variable("fc3_w", [mid_size2, vocab_size],                                dtype=data_type(), trainable=True,                                initializer=tf.contrib.layers.xavier_initializer())        fc3_b = tf.get_variable("fc3_b", [vocab_size],                                dtype=data_type(), trainable=True,                                initializer=tf.contrib.layers.xavier_initializer())        logits = tf.nn.xw_plus_b(fc2, fc3_w, fc3_b)        logits = tf.reshape(logits, [self.batch_size, self.num_steps, vocab_size])        # loss = tf.reduce_mean(tf.square(logits - input_.targets))        loss = tf.reduce_mean(            tf.square(logits[:, self.num_steps - 1, :] - input_.targets[:, self.num_steps - 1, :]))        # Use the contrib sequence loss and average over the batches        # loss = tf.contrib.seq2seq.sequence_loss(        #     logits,        #     input_.targets,        #     tf.ones([self.batch_size, self.num_steps], dtype=data_type()),        #     average_across_timesteps=False,        #     average_across_batch=True)        self._cost = loss        self._output = logits[:, self.num_steps - 1, :]  # + scale_min        self._final_state = state        if not is_training:            return        tvars = tf.trainable_variables()        self._lr = tf.Variable(0.0, trainable=False)        optimzer = tf.train.AdadeltaOptimizer(self._lr).minimize(loss)        # optimzer = tf.train.RMSPropOptimizer(self._lr).minimize(loss)        self._train_op = optimzer        # optimizer = tf.train.GradientDescentOptimizer(self._lr)        # grads, _ = tf.clip_by_global_norm(tf.gradients(self._cost, tvars), config.max_grad_norm)        # self._train_op = optimizer.apply_gradients(zip(grads, tvars),        #                                            global_step=tf.train.get_or_create_global_step())        self._new_lr = tf.placeholder(tf.float32, shape=[], name="new_learning_rate")        self._lr_update = tf.assign(self._lr, self._new_lr)    def _build_rnn_graph_cudnn(self, inputs, config, is_training):        """Build the inference graph using CUDNN cell."""        inputs = tf.transpose(inputs, [1, 0, 2])        self._cell = tf.contrib.cudnn_rnn.CudnnLSTM(            num_layers=config.num_layers,            num_units=config.hidden_size,            input_size=config.hidden_size,            dropout=1 - config.keep_prob if is_training else 0)        params_size_t = self._cell.params_size()        self._rnn_params = tf.get_variable(            "lstm_params",            initializer=tf.random_uniform(                [params_size_t], -config.init_scale, config.init_scale),            validate_shape=False)        c = tf.zeros([config.num_layers, self.batch_size, config.hidden_size],                     tf.float32)        h = tf.zeros([config.num_layers, self.batch_size, config.hidden_size],                     tf.float32)        self._initial_state = (tf.contrib.rnn.LSTMStateTuple(h=h, c=c),)        outputs, h, c = self._cell(inputs, h, c, self._rnn_params, is_training)        outputs = tf.transpose(outputs, [1, 0, 2])        outputs = tf.reshape(outputs, [-1, config.hidden_size])        return outputs, (tf.contrib.rnn.LSTMStateTuple(h=h, c=c),)    def _get_lstm_cell(self, config, is_training):        if config.rnn_mode == confu.BASIC:            return tf.contrib.rnn.BasicLSTMCell(                config.hidden_size, forget_bias=0.0, state_is_tuple=True,                reuse=not is_training)        if config.rnn_mode == confu.BLOCK:            return tf.contrib.rnn.LSTMBlockCell(                config.hidden_size, forget_bias=0.0)        raise ValueError("rnn_mode %s not supported" % config.rnn_mode)    def _build_rnn_graph_lstm(self, inputs, config, is_training):        """Build the inference graph using canonical LSTM cells."""        # Slightly better results can be obtained with forget gate biases        # initialized to 1 but the hyperparameters of the model would need to be        # different than reported in the paper.        def make_cell():            cell = self._get_lstm_cell(config, is_training)            if is_training and config.keep_prob < 1:                cell = tf.contrib.rnn.DropoutWrapper(                    cell, output_keep_prob=config.keep_prob)            return cell        cell = tf.contrib.rnn.MultiRNNCell(            [make_cell() for _ in range(config.num_layers)], state_is_tuple=True)        self._initial_state = cell.zero_state(config.batch_size, data_type())        state = self._initial_state        # Simplified version of tf.nn.static_rnn().        # This builds an unrolled LSTM for tutorial purposes only.        # In general, use tf.nn.static_rnn() or tf.nn.static_state_saving_rnn().        #        # The alternative version of the code below is:        #        # inputs = tf.unstack(inputs, num=self.num_steps, axis=1)        # outputs, state = tf.nn.static_rnn(cell, inputs,        #                                   initial_state=self._initial_state)        outputs = []        with tf.variable_scope("RNN"):            for time_step in range(self.num_steps):                if time_step > 0:                    tf.get_variable_scope().reuse_variables()                (cell_output, state) = cell(inputs[:, time_step, :], state)                # input:(batch_size,num_steps,3200)                # output:(batch_size,hidden_size)                # outputs:(batch_size*time_step,hidden_size)                outputs.append(cell_output)        output = tf.reshape(tf.concat(outputs, 1), [-1, config.hidden_size])        return output, state    def assign_lr(self, session, lr_value):        session.run(self._lr_update, feed_dict={self._new_lr: lr_value})    def export_ops(self, name):        """Exports ops to collections."""        self._name = name        ops = {util.with_prefix(self._name, "cost"): self._cost,               util.with_prefix(self._name, "output"): self._output}        if self._is_training:            ops.update(lr=self._lr, new_lr=self._new_lr, lr_update=self._lr_update)            if self._rnn_params:                ops.update(rnn_params=self._rnn_params)        for name, op in ops.items():            tf.add_to_collection(name, op)        self._initial_state_name = util.with_prefix(self._name, "initial")        self._final_state_name = util.with_prefix(self._name, "final")        util.export_state_tuples(self._initial_state, self._initial_state_name)        util.export_state_tuples(self._final_state, self._final_state_name)    def import_ops(self):        """Imports ops from collections."""        if self._is_training:            self._train_op = tf.get_collection_ref("train_op")[0]            self._lr = tf.get_collection_ref("lr")[0]            self._new_lr = tf.get_collection_ref("new_lr")[0]            self._lr_update = tf.get_collection_ref("lr_update")[0]            rnn_params = tf.get_collection_ref("rnn_params")            if self._cell and rnn_params:                params_saveable = tf.contrib.cudnn_rnn.RNNParamsSaveable(                    self._cell,                    self._cell.params_to_canonical,                    self._cell.canonical_to_params,                    rnn_params,                    base_variable_scope="Model/RNN")                tf.add_to_collection(tf.GraphKeys.SAVEABLE_OBJECTS, params_saveable)        self._cost = tf.get_collection_ref(util.with_prefix(self._name, "cost"))[0]        self._output = tf.get_collection_ref(util.with_prefix(self._name, "output"))[0]        num_replicas = FLAGS.num_gpus if self._name == "Train" else 1        self._initial_state = util.import_state_tuples(            self._initial_state, self._initial_state_name, num_replicas)        self._final_state = util.import_state_tuples(            self._final_state, self._final_state_name, num_replicas)    @property    def input(self):        return self._input    @property    def initial_state(self):        return self._initial_state    @property    def cost(self):        return self._cost    @property    def output(self):        return self._output    @property    def final_state(self):        return self._final_state    @property    def lr(self):        return self._lr    @property    def train_op(self):        return self._train_op    @property    def initial_state_name(self):        return self._initial_state_name    @property    def final_state_name(self):        return self._final_state_namedef run_epoch(session, model, optimzer_op=None, verbose=True, vec_dimes=3200, out_file=False):    """Runs the model on the given data."""    # 1、初始化    costs_sum = 0.0    state = session.run(model.initial_state)    outputs_sum = np.empty(shape=[0, vec_dimes])    fetches = {        "cost": model.cost,        "final_state": model.final_state,        "output": model.output    }    if optimzer_op is not None:        fetches["eval_op"] = optimzer_op    # 2、训练、测试    for step in range(model.input.epoch_size):        # 2.1、输入        feed_dict = {}        for i, (c, h) in enumerate(model.initial_state):            feed_dict[c] = state[i].c            feed_dict[h] = state[i].h        vals = session.run(fetches, feed_dict)        # 2.2、返回        # state = vals["final_state"]        state = session.run(model.initial_state)        costs_sum += vals["cost"]        if out_file:            output = vals["output"]            outputs_sum = np.concatenate((outputs_sum, output), axis=0)    # 3、结束    return costs_sum / model.input.epoch_size, outputs_sumdef get_config():    """Get model config."""    config = None    if FLAGS.model == "small":        config = confu.SmallConfig()    elif FLAGS.model == "medium":        config = confu.MediumConfig()    elif FLAGS.model == "large":        config = confu.LargeConfig()    elif FLAGS.model == "test":        config = confu.TestConfig()    else:        raise ValueError("Invalid model: %s", FLAGS.model)    if FLAGS.rnn_mode:        config.rnn_mode = FLAGS.rnn_mode    if FLAGS.num_gpus != 1 or tf.__version__ < "1.3.0":        config.rnn_mode = confu.BASIC    return configdef main(_):    print("【1/3】program_start...")    FLAGS.data_path = DATA_DIR[DAY_OR_SLOT]    FLAGS.save_path = LOG_DIR    FLAGS.model = MODEL_STRING    if not FLAGS.data_path:        raise ValueError("Must set --data_path to PTB data directory")    # 1、初始化    # 修改文件读取，生成序列    # raw_data = reader.ptb_raw_data(FLAGS.data_path)    raw_data = util_k.read_traj_data(FLAGS.data_path, DAY_OR_SLOT)    train_data, test_data, all_data, _ = raw_data    config = get_config()    eval_config = get_config()    eval_config.batch_size = 1    # 2、实例化。训练对象、测试对象、全部输出对象    with tf.Graph().as_default():        # 2.1、实例化        initializer = tf.random_uniform_initializer(-config.init_scale, config.init_scale)        with tf.name_scope("Train"):            train_input = PTBInput(config=config, data=train_data, name="TrainInput")            with tf.variable_scope("Model", reuse=None, initializer=initializer):                m = PTBModel(is_training=True, config=config, input_=train_input)            tf.summary.scalar("Training Loss", m.cost)            tf.summary.scalar("Learning Rate", m.lr)        with tf.name_scope("Test"):            test_input = PTBInput(config=eval_config, data=test_data, name="TestInput")            with tf.variable_scope("Model", reuse=True, initializer=initializer):                mtest = PTBModel(is_training=False, config=eval_config, input_=test_input)        with tf.name_scope("Inference"):            all_input = PTBInput(config=eval_config, data=all_data, name="AllInput")            with tf.variable_scope("Model", reuse=True, initializer=initializer):                minfer = PTBModel(is_training=False, config=eval_config, input_=all_input)        # 2.2、保存结构        models = {"Train": m, "Test": mtest, "Infer": minfer}        for name, model in models.items():            model.export_ops(name)        metagraph = tf.train.export_meta_graph()        soft_placement = False        if FLAGS.num_gpus > 1:            soft_placement = True            util.auto_parallel(metagraph, m)    # 3、导入、执行图    with tf.Graph().as_default():        # 3.1、初始化。自动保存        tf.train.import_meta_graph(metagraph)        for model in models.values():            model.import_ops()        sv = tf.train.Supervisor(logdir=FLAGS.save_path)        config_proto = tf.ConfigProto(allow_soft_placement=soft_placement)        config_proto.gpu_options.allow_growth = True        print("【2/3】open_session...")        # 3.2、开始执行        with sv.managed_session(config=config_proto) as session:            print("【3/3】begin_epoch...")            for i in range(config.max_max_epoch):                lr_decay = config.lr_decay ** max(i + 1 - config.max_epoch, 0.0)                m.assign_lr(session, config.learning_rate * lr_decay)                # 3.3、具体迭代                loss_val, out_all = run_epoch(session, m, optimzer_op=m.train_op, verbose=True,                                              vec_dimes=config.vocab_size, out_file=False)                print("Epoch: %d, Train loss: %.3f, Learning rate: %f" % (i + 1, loss_val, session.run(m.lr)))                test_loss_val, test_out_all = run_epoch(session, mtest, optimzer_op=None,                                                        vec_dimes=config.vocab_size, out_file=False)                print("Epoch: %d, Test loss: %.3f" % (i + 1, test_loss_val))                print()                # 3.4、保存输出、模型                if i >= 105 and i % 5 == 0:                    test_loss_val, infer_out_all = run_epoch(session, minfer, optimzer_op=None,                                                             vec_dimes=config.vocab_size, out_file=True)                    f = h5py.File(OUT_FILE_NAME[DAY_OR_SLOT] % i, 'w')                    f['data'] = np.array(infer_out_all)                    f.close()                print("Saving model to %s." % FLAGS.save_path)                sv.saver.save(session, FLAGS.save_path, global_step=sv.global_step)if __name__ == "__main__":    tf.app.run()